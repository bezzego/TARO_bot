import re
import json
import logging
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext

import config
import database
import keyboards
from states import BookingState

router = Router()

# Cancel command handler to abort the booking process
@router.message(F.text.lower() == "/cancel")
async def cancel_command(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=keyboards.main_menu_kb)
    else:
        data = await state.get_data()
        # If a booking was already created and waiting (e.g., slot reserved)
        if data.get("booking_id"):
            booking_id = data["booking_id"]
            record = await database.get_booking_by_id(booking_id)
            if record:
                status = record["status"]
                if status in (config.STATUS_WAITING_PAYMENT, config.STATUS_CHECKING, config.STATUS_CONFIRMED):
                    # Cancel booking in DB and free slot
                    slot_id = record["slot_id"]
                    await database.update_booking_status(booking_id, config.STATUS_CANCELLED)
                    await database.db.execute("UPDATE slots SET is_taken=0 WHERE id=?", (slot_id,))
                    await database.db.commit()
                    logging.info(f"Booking {booking_id} cancelled by user via /cancel")
                    # Notify admin group if a payment was pending or booking confirmed
                    admin_msg_id = record["admin_message_id"]
                    if admin_msg_id:
                        # Edit admin's message to note cancellation
                        try:
                            await config.bot.edit_message_text(chat_id=config.ADMIN_GROUP_ID, message_id=admin_msg_id,
                                                              text=f"–ó–∞–ø–∏—Å—å #{booking_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                        except Exception as e:
                            logging.error(f"Failed to edit admin message for cancellation: {e}")
                    else:
                        # If no admin message existed (cancelled before payment sent), inform admin group
                        try:
                            if config.ADMIN_GROUP_ID:
                                user = message.from_user
                                await config.bot.send_message(config.ADMIN_GROUP_ID,
                                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} (@{user.username}) –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å #{booking_id}.")
                        except Exception as e:
                            logging.error(f"Failed to notify admin of cancellation: {e}")
        await state.clear()
        await message.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=keyboards.main_menu_kb)

# Start command /start - greeting and main menu
@router.message(F.text == "/start")
async def start_command(message: Message, state: FSMContext):
    user = message.from_user
    # Register or update user in database
    await database.get_or_create_user(user.id, user.username, user.full_name)
    # Greeting message with current price fetched from DB
    try:
        price = await database.get_price()
    except Exception:
        # Fallback if DB call fails
        price = 350
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ä–∞—Å–∫–ª–∞–¥. –£—Å–ª–æ–≤–∏—è:\n"
        f"1 –≤–æ–ø—Ä–æ—Å = {price} ‚ÇΩ.\n"
        "–î–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–∏—Ç—É–∞—Ü–∏–∏, –∏–º–µ–Ω–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Ñ–æ—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏.\n"
        "–ó–∞–ø–∏—Å—å –∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞."
    )
    await message.answer(welcome_text, reply_markup=keyboards.main_menu_kb)

# Help menu
@router.message(F.text == "‚Ñπ –ü–æ–º–æ—â—å")
async def help_command(message: Message):
    help_text = (
        "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å–∫–ª–∞–¥, –Ω–∞–∂–º–∏—Ç–µ ¬´üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n"
        "–í —Ä–∞–∑–¥–µ–ª–µ ¬´üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏¬ª –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å, –∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.\n"
        "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    await message.answer(help_text, reply_markup=keyboards.main_menu_kb)

# Begin booking process when user selects "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
@router.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def book_appointment(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é (–∫—Ä–∞—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è).", reply_markup=None)
    await state.set_state(BookingState.story)

# State: waiting for the story of the situation
@router.message(BookingState.story)
async def receive_story(message: Message, state: FSMContext):
    if not message.text or message.text.strip() == "":
        await message.answer("–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é.")
        return
    await state.update_data(story=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∏–º–µ–Ω–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–∏—Ç—É–∞—Ü–∏–∏.")
    await state.set_state(BookingState.participants)

# State: waiting for participants' names
@router.message(BookingState.participants)
async def receive_participants(message: Message, state: FSMContext):
    if not message.text or message.text.strip() == "":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω, –ú–∞—Ä–∏—è, ...).")
        return
    await state.update_data(participants=message.text.strip())
    # Request photos of all participants
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=keyboards.done_kb)
    await state.set_state(BookingState.photos)

# State: waiting for photos of participants and then "–ì–æ—Ç–æ–≤–æ"
@router.message(BookingState.photos)
async def receive_photos(message: Message, state: FSMContext):
    if message.photo:
        # Collect photo file_id
        photo_id = message.photo[-1].file_id
        data = await state.get_data()
        photos = data.get("photos", [])
        photos.append(photo_id)
        await state.update_data(photos=photos)
        # (No immediate response to avoid flooding the chat for each photo)
        return
    text = (message.text or "").lower()
    if text in ["–≥–æ—Ç–æ–≤–æ", "/done", "done"]:
        data = await state.get_data()
        photos = data.get("photos", [])
        if not photos:
            await message.answer("–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
            return
        # Proceed to next step: ask for questions
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏).", reply_markup=None)
        await state.set_state(BookingState.questions)
    else:
        # If some other text was sent instead of photos or "–ì–æ—Ç–æ–≤–æ"
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")

# State: waiting for list of questions
@router.message(BookingState.questions)
async def receive_questions(message: Message, state: FSMContext):
    if not message.text or message.text.strip() == "":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã (–∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏).")
        return
    questions_text = message.text.strip()
    # Split by lines to count questions
    question_lines = [q for q in questions_text.splitlines() if q.strip()]
    num_questions = len(question_lines)
    if num_questions == 0:
        await message.answer("–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å.")
        return
    price = await database.get_price()
    amount = num_questions * price
    await state.update_data(questions=questions_text, num_questions=num_questions, amount=amount)
    await message.answer(f"–í–æ–ø—Ä–æ—Å–æ–≤: {num_questions}. –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ.")
    # Request phone number
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.", reply_markup=keyboards.contact_kb)
    await state.set_state(BookingState.phone)

# State: waiting for phone contact or manual input
@router.message(BookingState.phone)
async def receive_phone(message: Message, state: FSMContext):
    phone_number = None
    if message.contact:
        phone_number = message.contact.phone_number
    elif message.text:
        raw = message.text.strip()
        digits = re.sub(r"\\D", "", raw)
        if raw.startswith('+'):
            phone_number = '+' + digits
        else:
            if len(digits) == 11 and digits.startswith('8'):
                phone_number = '+7' + digits[1:]
            else:
                phone_number = '+' + digits
        clean_digits = re.sub(r"\\D", "", phone_number)
        if len(clean_digits) < 10 or len(clean_digits) > 15:
            phone_number = None
    if not phone_number:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä +79991234567.", reply_markup=keyboards.contact_kb)
        return
    # Save phone and update user record
    user = message.from_user
    await database.update_user_phone(user.id, phone_number)
    await state.update_data(phone=phone_number)
    # Show available dates
    free_dates = await database.get_free_dates()
    if not free_dates:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboards.main_menu_kb)
        await state.clear()
        return
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    date_buttons = []
    for date_str in free_dates:
        try:
            dt = datetime.strptime(date_str, "%Y-%m-%d")
            display = dt.strftime("%d.%m.%Y")
        except:
            display = date_str
        date_buttons.append([InlineKeyboardButton(text=display, callback_data=f"date|{date_str}")])

    date_kb = InlineKeyboardMarkup(inline_keyboard=date_buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=date_kb)
    await state.set_state(BookingState.select_date)

# State: waiting for date selection (inline button)
@router.callback_query(BookingState.select_date)
async def select_date_callback(callback: CallbackQuery, state: FSMContext):
    data = callback.data
    if not data or not data.startswith("date|"):
        await callback.answer()
        return
    selected_date = data.split("|", 1)[1]
    free_times = await database.get_free_times(selected_date)
    if not free_times:
        # No times available for that date (possibly taken just now)
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.", show_alert=True)
        free_dates = await database.get_free_dates()
        if free_dates:
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            date_buttons = []
            for date_str in free_dates:
                try:
                    dt = datetime.strptime(date_str, "%Y-%m-%d")
                    display = dt.strftime("%d.%m.%Y")
                except:
                    display = date_str
                date_buttons.append([InlineKeyboardButton(text=display, callback_data=f"date|{date_str}")])
            date_kb = InlineKeyboardMarkup(inline_keyboard=date_buttons)
            try:
                await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=date_kb)
            except:
                await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=date_kb)
            # Remain in select_date state
        else:
            await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç.")
            await state.clear()
        await callback.answer()
        return
    # List available times for selected date
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    time_buttons = [
        [InlineKeyboardButton(text=time, callback_data=f"time|{slot_id}")]
        for slot_id, time in free_times
    ]
    time_kb = InlineKeyboardMarkup(inline_keyboard=time_buttons)
    try:
        await callback.message.edit_text(f"–î–∞—Ç–∞ {datetime.strptime(selected_date, '%Y-%m-%d').strftime('%d.%m.%Y')} –≤—ã–±—Ä–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=time_kb)
    except:
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=time_kb)
    await state.update_data(selected_date=selected_date)
    await state.set_state(BookingState.select_time)
    await callback.answer()

# State: waiting for time selection (inline button)
@router.callback_query(BookingState.select_time)
async def select_time_callback(callback: CallbackQuery, state: FSMContext):
    data = callback.data
    if not data or not data.startswith("time|"):
        await callback.answer()
        return
    try:
        slot_id = int(data.split("|", 1)[1])
    except:
        await callback.answer()
        return
    fsm_data = await state.get_data()
    story = fsm_data.get("story")
    participants = fsm_data.get("participants")
    photos = fsm_data.get("photos", [])
    questions = fsm_data.get("questions")
    num_questions = fsm_data.get("num_questions", 0)
    amount = fsm_data.get("amount", 0)
    user_id = callback.from_user.id
    booking_id = await database.reserve_slot_and_create_booking(user_id, slot_id, story, participants, photos, questions, num_questions, amount)
    if not booking_id:
        # If slot just got taken by someone else
        free_times = await database.get_free_times(fsm_data.get("selected_date"))
        if free_times:
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            time_buttons = [
                [InlineKeyboardButton(text=t, callback_data=f"time|{sid}")]
                for sid, t in free_times
            ]
            time_kb = InlineKeyboardMarkup(inline_keyboard=time_buttons)
            try:
                await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=time_kb)
            except:
                await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=time_kb)
            await callback.answer("–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.", show_alert=True)
            return
        else:
            # If no times left on that date, go back to date selection
            free_dates = await database.get_free_dates()
            if free_dates:
                from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                date_buttons = []
                for date_str in free_dates:
                    try:
                        dt = datetime.strptime(date_str, "%Y-%m-%d")
                        display = dt.strftime("%d.%m.%Y")
                    except:
                        display = date_str
                    date_buttons.append([InlineKeyboardButton(text=display, callback_data=f"date|{date_str}")])
                date_kb = InlineKeyboardMarkup(inline_keyboard=date_buttons)
                await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=date_kb)
                await state.set_state(BookingState.select_date)
            else:
                await callback.message.edit_text("–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                await state.clear()
            await callback.answer("–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.", show_alert=True)
            return
    # Slot reserved and booking created
    await state.update_data(booking_id=booking_id)
    # Remove the times keyboard from the message
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    # Compose payment instructions
    slot_cur = await database.db.execute("SELECT date, time FROM slots WHERE id=?", (slot_id,))
    slot_row = await slot_cur.fetchone()
    if slot_row:
        date_obj = datetime.strptime(slot_row['date'], "%Y-%m-%d")
        date_disp = date_obj.strftime("%d.%m.%Y")
        time_str = slot_row['time']
    else:
        date_disp = fsm_data.get('selected_date')
        time_str = ""
    pay_text = (f"–°–ª–æ—Ç {date_disp} {time_str} –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 15 –º–∏–Ω—É—Ç.\n"
                f"–û–ø–ª–∞—Ç–∏—Ç–µ {amount} ‚ÇΩ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n"
                "–°–±–µ—Ä–±–∞–Ω–∫: 2202 2061 5913 1163 (–°–µ—Ä–≥–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –°.)\n"
                "–¢–∏–Ω—å–∫–æ—Ñ—Ñ: 2200 7017 1423 6749 (–ê—Ä–∏–∞–Ω–Ω–∞ –°.)\n"
                "–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É —É–∫–∞–∂–∏—Ç–µ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã.\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")
    await callback.message.answer(pay_text)
    await state.set_state(BookingState.waiting_receipt)
    # Schedule auto-unlock job in 15 minutes
    from scheduler import scheduler, unlock_timeout
    run_time = datetime.now() + timedelta(minutes=15)
    try:
        scheduler.add_job(unlock_timeout, "date", run_date=run_time, args=[booking_id], id=f"unlock_{booking_id}")
    except Exception as e:
        logging.error(f"Failed to schedule unlock job: {e}")
    await callback.answer()

# State: waiting for payment receipt photo
@router.message(BookingState.waiting_receipt)
async def receive_receipt(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ.")
        return
    data = await state.get_data()
    booking_id = data.get("booking_id")
    if not booking_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏.", reply_markup=keyboards.main_menu_kb)
        await state.clear()
        return
    record = await database.get_booking_by_id(booking_id)
    if not record or record["status"] != config.STATUS_WAITING_PAYMENT:
        await message.answer("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=keyboards.main_menu_kb)
        await state.clear()
        return
    # Update status to "CHECKING" (awaiting admin confirmation)
    await database.update_booking_status(booking_id, config.STATUS_CHECKING)
    # Cancel the scheduled unlock job
    from scheduler import scheduler
    try:
        scheduler.remove_job(f"unlock_{booking_id}")
    except Exception as e:
        logging.warning(f"Unlock job removal failed or not found: {e}")
    # Notify admin group with booking details
    details = await database.get_booking_details(booking_id)
    if details:
        user_name = details["user_name"] or ""
        username = details["username"] or ""
        phone = details["phone"] or ""
        story = details["story"] or ""
        participants = details["participants"] or ""
        questions = details["questions"] or ""
        date = details["date"] or ""
        time = details["time"] or ""
        num_q = details["num_questions"]
        amount = details["amount"]
        photos_json = details["photos"]
        participant_photos = []
        if photos_json:
            try:
                participant_photos = json.loads(photos_json)
            except:
                participant_photos = []
        # Send participants' photos to admin group
        try:
            if participant_photos:
                media_group = []
                for idx, pid in enumerate(participant_photos):
                    if idx == 0:
                        media_group.append(InputMediaPhoto(media=pid, caption=f"–§–æ—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∑–∞–ø–∏—Å—å #{booking_id})"))
                    else:
                        media_group.append(InputMediaPhoto(media=pid))
                await config.bot.send_media_group(chat_id=config.ADMIN_GROUP_ID, media=media_group)
        except Exception as e:
            # Handle possible supergroup migration: extract new chat id and retry once
            err_text = str(e)
            logging.error(f"Failed to send participant photos to admin group: {err_text}")
            m = re.search(r"-100\d+", err_text)
            if m:
                try:
                    new_id = int(m.group())
                    config.ADMIN_GROUP_ID = new_id
                    logging.info(f"Detected admin group migration. Updating ADMIN_GROUP_ID to {new_id} and retrying media group send.")
                    if participant_photos:
                        media_group = []
                        for idx, pid in enumerate(participant_photos):
                            if idx == 0:
                                media_group.append(InputMediaPhoto(media=pid, caption=f"–§–æ—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∑–∞–ø–∏—Å—å #{booking_id})"))
                            else:
                                media_group.append(InputMediaPhoto(media=pid))
                        await config.bot.send_media_group(chat_id=config.ADMIN_GROUP_ID, media=media_group)
                except Exception as e2:
                    logging.error(f"Retry after migration failed: {e2}")
        # Send payment receipt photo
        try:
            receipt_file_id = message.photo[-1].file_id
            await config.bot.send_photo(chat_id=config.ADMIN_GROUP_ID, photo=receipt_file_id, caption=f"–ß–µ–∫ –æ—Ç @{username or user_name}")
        except Exception as e:
            err_text = str(e)
            logging.error(f"Failed to send receipt photo to admin group: {err_text}")
            m = re.search(r"-100\d+", err_text)
            if m:
                try:
                    new_id = int(m.group())
                    config.ADMIN_GROUP_ID = new_id
                    logging.info(f"Detected admin group migration. Updating ADMIN_GROUP_ID to {new_id} and retrying receipt send.")
                    await config.bot.send_photo(chat_id=config.ADMIN_GROUP_ID, photo=receipt_file_id, caption=f"–ß–µ–∫ –æ—Ç @{username or user_name}")
                except Exception as e2:
                    logging.error(f"Retry after migration (receipt) failed: {e2}")
        # Send booking details text with inline confirm/reject buttons
        details_text = (
            f"–ó–∞–ø–∏—Å—å #{booking_id}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {user_name} (@{username})\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–ò—Å—Ç–æ—Ä–∏—è: {story}\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {participants}\n"
            f"–í–æ–ø—Ä–æ—Å–æ–≤: {num_q}\n"
            f"–í–æ–ø—Ä–æ—Å—ã: {questions}\n"
            f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')} {time}\n"
            f"–°—É–º–º–∞: {amount} ‚ÇΩ\n"
            f"–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"
        )
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        admin_kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–µ–∫", callback_data=f"confirm|{booking_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject|{booking_id}")
            ]
        ])
        try:
            sent_msg = await config.bot.send_message(chat_id=config.ADMIN_GROUP_ID, text=details_text, reply_markup=admin_kb)
            await database.set_booking_admin_message_id(booking_id, sent_msg.message_id)
        except Exception as e:
            err_text = str(e)
            logging.error(f"Failed to send booking details to admin group: {err_text}")
            m = re.search(r"-100\d+", err_text)
            if m:
                try:
                    new_id = int(m.group())
                    config.ADMIN_GROUP_ID = new_id
                    logging.info(f"Detected admin group migration. Updating ADMIN_GROUP_ID to {new_id} and retrying details send.")
                    sent_msg = await config.bot.send_message(chat_id=config.ADMIN_GROUP_ID, text=details_text, reply_markup=admin_kb)
                    await database.set_booking_admin_message_id(booking_id, sent_msg.message_id)
                except Exception as e2:
                    logging.error(f"Retry after migration (details) failed: {e2}")
    # Acknowledge user
    await message.answer("–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=keyboards.main_menu_kb)
    await state.clear()

# List the user's bookings and provide cancel options
@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def list_bookings(message: Message):
    user_id = message.from_user.id
    records = await database.get_user_bookings(user_id)
    if not records or len(records) == 0:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", reply_markup=keyboards.main_menu_kb)
    else:
        text_lines = ["–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:"]
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        buttons = []
        for rec in records:
            status = rec["status"]
            date = rec["date"]
            time = rec["time"]
            # Map status to Russian text
            if status == config.STATUS_WAITING_PAYMENT:
                status_text = "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
            elif status == config.STATUS_CHECKING:
                status_text = "–ù–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏"
            elif status == config.STATUS_CONFIRMED:
                status_text = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
            else:
                status_text = status
            date_display = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
            text_lines.append(f"- {date_display} {time} ‚Äî {status_text}")
            buttons.append([InlineKeyboardButton(text=f"–û—Ç–º–µ–Ω–∏—Ç—å {date_display} {time}", callback_data=f"cancel|{rec['id']}")])
        cancel_kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer("\n".join(text_lines), reply_markup=cancel_kb)

# Handle inline cancel button for a specific booking
@router.callback_query(F.data.startswith("cancel|"))
async def cancel_booking_callback(callback: CallbackQuery, state: FSMContext):
    try:
        booking_id = int(callback.data.split("|", 1)[1])
    except:
        await callback.answer()
        return
    record = await database.get_booking_by_id(booking_id)
    if record is None or record["user_id"] != callback.from_user.id:
        await callback.answer("–û—à–∏–±–∫–∞ –∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    status = record["status"]
    if status in (config.STATUS_WAITING_PAYMENT, config.STATUS_CHECKING, config.STATUS_CONFIRMED):
        await database.update_booking_status(booking_id, config.STATUS_CANCELLED)
        await database.db.execute("UPDATE slots SET is_taken=0 WHERE id=?", (record["slot_id"],))
        await database.db.commit()
        logging.info(f"Booking {booking_id} cancelled by user via inline button")
        # Remove scheduled unlock job (if any)
        from scheduler import scheduler
        try:
            scheduler.remove_job(f"unlock_{booking_id}")
        except:
            pass
        # Notify admin group
        admin_msg_id = record["admin_message_id"]
        if admin_msg_id:
            try:
                await config.bot.edit_message_text(chat_id=config.ADMIN_GROUP_ID, message_id=admin_msg_id,
                                                  text=f"–ó–∞–ø–∏—Å—å #{booking_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            except Exception as e:
                logging.error(f"Failed to edit admin message on user cancel: {e}")
        else:
            try:
                if config.ADMIN_GROUP_ID:
                    await config.bot.send_message(config.ADMIN_GROUP_ID,
                        f"–ó–∞–ø–∏—Å—å #{booking_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–¥–æ –æ–ø–ª–∞—Ç—ã).")
            except Exception as e:
                logging.error(f"Failed to notify admin group of cancellation: {e}")
        # Update the list message by removing inline keyboard
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except:
            pass
        # Optionally, update the list of bookings
        await list_bookings(callback.message)
        await callback.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=False)
    else:
        await callback.answer("–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å.", show_alert=True)